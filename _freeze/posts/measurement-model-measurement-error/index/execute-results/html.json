{
  "hash": "0bae629f9c1f02477ea96f5da07c9070",
  "result": {
    "markdown": "---\ntitle: \"Don't Mis-Measurement Measurement Model Measurement Error\"\nauthor: \"Bertrand Wilden\"\ndate: \"2023-06-21\"\ncategories: [Bayes, Stan, Tutorial]\nmax-description-length: 20\ndraft: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.1.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.1.2\n```\n:::\n:::\n\n::: {.cell}\n<style type=\"text/css\">\n.title {\n  color: #f5f5f5;\n}\n</style>\n:::\n\n\n\n\n\n## Introduction\n\n- 4 dist plot\n  - sd, skew, kurtosis\n\n## Variance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_mle_dist_params <- function(input_df, unit_col, draws_col, distribution) {\n  if (distribution %in% c(\"N\", \"T\")) {\n    alpha_0_list <- list(alpha = 0)\n  } else {\n    alpha_0_list <- list()\n  }\n  \n  if (nchar(distribution) == 1) {\n    distribution <- paste0(\"S\", distribution)\n  }\n  \n  out_df <- input_df |> \n    select(all_of(c(unit_col, draws_col))) |> \n    nest_by(!!sym(unit_col)) |> \n    mutate(mod = list(sn::selm(!!sym(draws_col) ~ 1, \n                               data = data,\n                               family = distribution,\n                               fixed.param = alpha_0_list)),\n           dp = sn::extractSECdistr(mod) |>\n             slot(\"dp\") |>\n             t() |>\n             as_tibble()) |> \n    unnest(dp) |> \n    select(-c(data, mod))\n  return(out_df)\n}\n# tibble(x = c(rnorm(500, 1, 2), rnorm(500)),\n#        unit = c(rep(\"a\", 500), rep(\"b\", 500))) |> \n#   get_mle_dist_params(unit_col = \"unit\", draws_col = \"x\", distribution = \"T\") \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsim_noisy_data <- function(N, \n                           n_draws, \n                           noise_level, \n                           true_b,\n                           bias_level,\n                           dfs,\n                           ...) {\n  \n  \n  dat <- tibble(\n    unit = as.factor(1:N),\n    x_true = rnorm(N),\n    u = rnorm(N) * bias_level\n  ) |> \n    crossing(draw = as.factor(1:n_draws)) |> \n    group_by(unit) |> \n    mutate(x_dist = rst(n = n(), \n                        xi = x_true, \n                        omega = noise_level, \n                        alpha = u,\n                        nu = dfs),\n           x_meas = mean(x_dist)) |> \n    ungroup()\n  \n  unit_dps <- dat |> \n    get_mle_dist_params(unit_col = \"unit\", \n                        draws_col = \"x_dist\",\n                        ...)\n  \n  dat <- dat |> \n    select(unit, x_true, x_meas, u) |> \n    distinct() |> \n    left_join(unit_dps, by = \"unit\") |> \n    mutate(y = rnorm(n(), mean = x_true * true_b + u * bias_level))\n  \n  return(dat)\n}\n# a<-sim_noisy_data(N = 100, \n#                   n_draws = 1000, \n#                   noise_level = 1, \n#                   true_b = 1,\n#                   bias_level = 1,\n#                   dfs = 5,\n#                   distribution = \"T\")\n# a\n# cor(a$x_true, a$x_meas)\n```\n:::\n\n::: {.cell output.var='lm'}\n\n```{.stan .cell-code}\ndata {\n  int<lower=1> N;    \n  array[N] real x_meas; \n  array[N] real<lower=0> x_sd;   \n  array[N] real x_skew;\n  vector[N] y;\n}\n\nparameters {\n  real beta0;           \n  real beta;            \n  real<lower=0> sigma;\n  array[N] real x;       \n  real<lower=0> tau;\n  real mu;\n}\n\nmodel {\n  beta0 ~ normal(0, 2);\n  beta ~ normal(0, 2);\n  sigma ~ student_t(3, 0, 2);\n  tau ~ student_t(3, 0, 2);\n  mu ~ normal(0, 1);\n  to_vector(x) ~ normal(mu, tau);\n  \n  for (i in 1:N) {\n    x_meas[i] ~ skew_normal(x[i], x_sd[i], x_skew[i]);\n        \n    y[i] ~ normal(beta0 + beta * x[i], sigma);\n  }\n}\n```\n:::\n\n\n\n\n## Skew\n\n## Kurtosis\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}