{
  "hash": "6dd556dd232f907dc340e9d01c07d530",
  "result": {
    "markdown": "---\ntitle: \"SD - STRO\"\nauthor: \"Bertrand Wilden\"\ndate: \"2023-06-21\"\ncategories: [GIS]\nmax-description-length: 20\ndraft: true\n---\n\n\nA few days ago on the [r/SanDiegan subreddit](https://www.reddit.com/r/SanDiegan/comments/158psns/any_data_analysts_want_to_dig_into_stro_licenses/) someone posted a [link to new data](https://data.sandiego.gov/datasets/stro-licenses/) from the City of San Diego on Short-Term Residential Occupancy (STRO) licenses. These data show the addresses and owners of every licensed Airbnb (and other similar arrangements, I guess) in the city. Airbnb's are a soure of ire among some San Diego residents for supposedly wasting our precious housing supply. My view is that this issue is a bit of a red-herring. Housing in California cities like San Diego is so catastrophically under-supplied due to years of restrictive zoning laws that, even if Airbnbs were all made illegal tomorrow, it wouldn't make much of a difference.\n\nIn this post I'm going to walk through how to make some maps with this STRO data using R. I [posted one these maps to Reddit](https://www.reddit.com/r/SanDiegan/comments/15ahjyb/short_term_rental_licenses_map/) but made an embarrassing error which resulted in the incorrect magnitudes being displayed. Always double check your work!\n\n## Working with the STRO data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Packages and Global Options\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(purrr)\nlibrary(tidycensus)\nlibrary(sf)\nlibrary(tigris)\n```\n:::\n\n\nMy goal is to create a choropleth map of San Diego with regions shaded according to their proportion of STROs. The packages {dplyr} and {ggplot2} are for some light data manipulation and producing the graphs. Inspired by [Michael DeCrescenzo's posts](https://mikedecr.netlify.app/blog/partial_fns_ggplot/) on functional programming in R, I use {purrr} for some currying and composition later in this post. {tidycensus} is the best way to access US Census data in my opinion. And {sf} and {tigris} are my two favorite GIS packages in R.\n\nNow let's take a look at the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstro <- readr::read_csv(\"https://seshat.datasd.org/stro_licenses/stro_licenses_datasd.csv\")\nstro\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7,816 × 23\n   license_id address      street_number street_number_fraction street_direction\n   <chr>      <chr>                <dbl> <chr>                  <chr>           \n 1 STR-00001L 3119 Keats …          3119 <NA>                   <NA>            \n 2 STR-00008L 2026 BALBOA…          2026 <NA>                   <NA>            \n 3 STR-00012L 4922 Lamont…          4922 <NA>                   <NA>            \n 4 STR-00014L 412 Los Ala…           412 <NA>                   <NA>            \n 5 STR-00017L 3353 Fox Pl…          3353 <NA>                   <NA>            \n 6 STR-00026L 2525 E St, …          2525 <NA>                   <NA>            \n 7 STR-00035L 3670 KEATIN…          3670 <NA>                   <NA>            \n 8 STR-00037L 6300 Scimit…          6300 <NA>                   <NA>            \n 9 STR-00046L 4039 Lamont…          4039 <NA>                   <NA>            \n10 STR-00049L 4445 Narrag…          4445 <NA>                   <NA>            \n# ℹ 7,806 more rows\n# ℹ 18 more variables: street_name <chr>, street_type <chr>, unit_type <chr>,\n#   unit_number <chr>, city <chr>, state <chr>, zip <dbl>, tier <chr>,\n#   community_planning_area <chr>, date_expiration <date>, rtax_no <chr>,\n#   tot_no <dbl>, longitude <dbl>, latitude <dbl>,\n#   local_contact_contact_name <chr>, local_contact_phone <dbl>,\n#   host_contact_name <chr>, council_district <dbl>\n```\n:::\n:::\n\n\nLooks like we've got around 7816 STRO licenses currently active in San Diego. But where are they concentrated? Luckily for our geo-spatial aspirations, the longitude and latitude values for these addresses are already contained in the data. Otherwise we would have to use a tool like the [Census geocoder](https://geocoding.geo.census.gov/geocoder/) or plug the addresses into ArcGIS. The longitude and latitude values will let us figure out in which Census tract these addresses are located, thereby allowing us to map their density.[^1]\n\n[^1]: As someone mentioned in my Reddit post, there are alternative ways to map the density of geo-spatial data---such as plotting the points directly on the map. The way I'm doing it here runs the risk of running into the [Modifiable areal unit problem](https://en.wikipedia.org/wiki/Modifiable_areal_unit_problem)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd_tracts <- tracts(state = \"CA\", county = \"San Diego\",\n                    progress_bar = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRetrieving data for the year 2021\n```\n:::\n\n```{.r .cell-code}\ntarget_crs <- st_crs(sd_tracts)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstro_geo <- stro |> \n  filter(!is.na(longitude)) |> \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs = target_crs,\n           remove = FALSE) |>\n  st_join(sd_tracts) |> \n  group_by(GEOID) |> \n  summarise(total_licenses = n()) |> \n  st_drop_geometry()\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd_acs <- get_acs(\n  geography = \"tract\",\n  variables = c(\"total_housing_units\" = \"B25001_001E\"),\n  state = \"CA\",\n  county = \"San Diego\",\n  geometry = TRUE,\n  progress_bar = FALSE\n) |> \n  st_transform() |>\n  erase_water(year = 2021) |> \n  st_make_valid() # Water makes the geometries wonky\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2017-2021 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nDownloading feature geometry from the Census website.  To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nFetching area water data for your dataset's location...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nErasing water area...\nIf this is slow, try a larger area threshold value.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsd <- sd_acs |> \n  left_join(stro_geo, by = \"GEOID\") |> \n  mutate(total_licenses = tidyr::replace_na(total_licenses, 0),\n         prop_stro = total_licenses / estimate,\n         log_prop_stro = log(prop_stro)) |> \n  st_transform(crs = target_crs) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crop_sd <- partial(\n  st_crop, \n  xmin = -117.3, xmax = -116.99,\n  ymin = 33, ymax = 32.4\n)\n\nst_crop_central_sd <- partial(\n  st_crop, \n  xmin = -117.3, xmax = -117,\n  ymin = 32.88, ymax = 32.67)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nscale_fill_viridis_log_prop_stro <- partial(\n  scale_fill_viridis_c, \n  labels = function(x) round(exp(x), 3),\n  breaks = log(c(0.005, 0.02, 0.1, .30)),\n  name = \"Proportion\",\n  option = \"B\",\n  # direction = -1,\n  na.value = \"grey\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_log_prop_stro_map <- function(input_data) {\n  n_zones <- nrow(input_data) \n  \n  p <- ggplot(input_data) +\n    aes(fill = log_prop_stro) +\n    geom_sf(color = \"black\", lwd = 50 / nrow(input_data)) +\n    theme_void() +\n    scale_fill_viridis_log_prop_stro() +\n    labs(title = \"Proportion of Short Term Rental Licenses\\nby Total Households per Census Tract\")\n  return(p)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncompose(make_log_prop_stro_map, st_crop_sd)(sd)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# ggsave(\"/Users/bertrandwilden/Desktop/sd_stros_long.png\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncompose(make_log_prop_stro_map, st_crop_central_sd)(sd)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# ggsave(\"/Users/bertrandwilden/Desktop/sd_stros.png\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_acs(\n  geography = \"place\",\n  variables = c(\"total_housing_units\" = \"B25001_001E\"),\n  state = \"CA\",\n  output = \"wide\"\n) |> \n  filter(NAME == \"San Diego city, California\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2017-2021 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  GEOID   NAME                       total_housing_units B25001_001M\n  <chr>   <chr>                                    <dbl>       <dbl>\n1 0666000 San Diego city, California              545792        2846\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}