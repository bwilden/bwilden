{
  "hash": "dea59a44d88ce1fcc0b64f1b11369ac1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Supreme Court\"\nauthor: \"Bertrand Wilden\"\ndate: \"2024-05-29\"\ncategories: [Bayes]\nmax-description-length: 20\ndraft: true\nexecute: \n  message: false\n  warning: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(brms)\nlibrary(tidybayes)\nlibrary(ggplot2)\nlibrary(ggdist)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvotes <- readr::read_csv(here::here(\"posts\", \"sc-ideal\", \"data-raw\", \"SCDB_2023_01_justiceCentered_Vote.csv\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvotes_recent <- votes |> \n  filter(term == 2022) |> \n  mutate(direction = case_when(direction == 2 ~ 1,\n                               direction == 1 ~ 2,\n                               .default = NA))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nirt_formula <- bf(\n  direction ~ gamma * theta + beta,\n  gamma ~ (1 | caseId),\n  theta ~ (1 | justiceName),\n  beta ~ (1 | caseId),\n  nl = TRUE\n)\n\nirt_priors <- \n  prior(normal(0, 2), class = b, nlpar = gamma, lb = 0) +\n  prior(normal(0, 2), class = b, nlpar = theta) +\n  prior(normal(0, 2), class = b, nlpar = beta)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_prior(irt_formula, \n          data = votes_recent, \n          family = bernoulli(link = \"probit\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nirt_fit <- brm(\n  formula = irt_formula,\n  prior = irt_priors,\n  data = votes_recent,\n  family = bernoulli(link = \"probit\"),\n  backend = \"cmdstanr\",\n  cores = 8,\n  threads = threading(2),\n  control = list(adapt_delta = 0.99,\n                 max_treedepth = 15),\n  refresh = 0,\n  seed = 111\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRunning MCMC with 4 chains, at most 8 in parallel, with 2 thread(s) per chain...\n\nChain 1 finished in 34.0 seconds.\nChain 4 finished in 34.4 seconds.\nChain 3 finished in 36.6 seconds.\nChain 2 finished in 39.7 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 36.2 seconds.\nTotal execution time: 39.9 seconds.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(irt_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: bernoulli \n  Links: mu = probit \nFormula: direction ~ gamma * theta + beta \n         gamma ~ (1 | caseId)\n         theta ~ (1 | justiceName)\n         beta ~ (1 | caseId)\n   Data: votes_recent (Number of observations: 623) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nMultilevel Hyperparameters:\n~caseId (Number of levels: 55) \n                    Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsd(gamma_Intercept)     1.73      1.18     0.33     4.70 1.00      822     1259\nsd(beta_Intercept)      2.77      0.70     1.58     4.29 1.01      361     1189\n\n~justiceName (Number of levels: 9) \n                    Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsd(theta_Intercept)     1.46      1.10     0.33     4.48 1.00     1214     1941\n\nRegression Coefficients:\n                Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ngamma_Intercept     1.11      0.73     0.20     2.97 1.00     1167     1432\ntheta_Intercept    -1.06      1.08    -3.40     0.98 1.02      300      577\nbeta_Intercept      0.91      0.79    -0.81     2.34 1.03      172      401\n\nDraws were sampled using sample(hmc). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_variables(irt_fit)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\njustice_draw <- irt_fit |> \n  spread_draws(r_justiceName__theta[justice,]) |> \n  ungroup() |> \n  mutate(justice = case_when(justice == \"SAAlito\" ~ \"Alito\",\n                             justice == \"CThomas\" ~ \"Thomas\",\n                             justice == \"NMGorsuch\" ~ \"Gorsuch\",\n                             justice == \"ACBarrett\" ~ \"Barrett\",\n                             justice == \"JGRoberts\" ~ \"Roberts\",\n                             justice == \"BMKavanaugh\" ~ \"Kavanaugh\",\n                             justice == \"KBJackson\" ~ \"Jackson\",\n                             justice == \"EKagan\" ~ \"Kagan\",\n                             justice == \"SSotomayor\" ~ \"Sotomayor\"),\n         theta = r_justiceName__theta,\n         justice = forcats::fct_reorder(justice, theta))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\njustice_draw |> \n  ggplot(aes(x = theta, \n             y = justice)) +\n  stat_slabinterval(aes(fill_ramp = after_stat(x)),\n                    fill = \"green\",\n                    density = \"unbounded\",\n                    alpha = .75) +\n  scale_fill_ramp_continuous(from = \"blue\") +\n  xlim(c(-3.5, 3.5)) +\n  labs(x = \"Ideology\", y = \"\", title = \"2022 Term\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# ggsave(\"judge_ideolog.png\", bg = \"white\")\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}